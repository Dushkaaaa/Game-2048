{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.defaultState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.board = initialState || JSON.parse(JSON.stringify(this.defaultState));\n        this.score = 0;\n        this.status = \"idle\";\n        this.rows = 4;\n        this.cols = 4;\n    }\n    arraysEqual(arr1, arr2) {\n        return JSON.stringify(arr1) === JSON.stringify(arr2);\n    }\n    move(direction) {\n        const directions = {\n            left: (row)=>row,\n            right: (row)=>row.slice().reverse(),\n            up: (col)=>col,\n            down: (col)=>col.slice().reverse()\n        };\n        const reverseDirections = {\n            left: (row)=>row,\n            right: (row)=>row.slice().reverse(),\n            up: (col)=>col,\n            down: (col)=>col.slice().reverse()\n        };\n        let changeBoard = false;\n        if (direction === \"left\" || direction === \"right\") for(let i = 0; i < this.rows; i++){\n            let newRow = directions[direction](this.board[i]).filter((value)=>value !== 0);\n            for(let j = 0; j < newRow.length - 1; j++)if (newRow[j] === newRow[j + 1]) {\n                newRow[j] *= 2;\n                this.score += newRow[j];\n                newRow[j + 1] = 0;\n                changeBoard = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < this.rows)newRow.push(0);\n            newRow = reverseDirections[direction](newRow);\n            if (!this.arraysEqual(this.board[i], newRow)) changeBoard = true;\n            this.board[i] = newRow;\n        }\n        else for(let col = 0; col < this.cols; col++){\n            let colData = this.board.map((row)=>row[col]);\n            colData = directions[direction](colData);\n            let newCol = colData.filter((value)=>value !== 0);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                this.score += newCol[i];\n                newCol[i + 1] = 0;\n                changeBoard = true;\n            }\n            newCol = newCol.filter((value)=>value !== 0);\n            while(newCol.length < this.rows)newCol.push(0);\n            newCol = reverseDirections[direction](newCol);\n            if (!this.arraysEqual(this.board.map((row)=>row[col]), newCol)) changeBoard = true;\n            for(let row = 0; row < this.rows; row++)this.board[row][col] = newCol[row];\n        }\n        if (this.status === \"playing\" && changeBoard) this.addRandomTile();\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        if (this.status === \"idle\") return \"idle\";\n        if (this.checkWin()) return \"win\";\n        if (this.checkLose()) return \"lose\";\n        return \"playing\";\n    }\n    checkWin() {\n        return this.board.some((row)=>row.includes(2048));\n    }\n    checkLose() {\n        if (this.board.some((row)=>row.includes(0))) return false;\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.cols; j++){\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1] || i < 3 && this.board[i][j] === this.board[i + 1][j]) return false;\n        }\n        return true;\n    }\n    start() {\n        this.board = JSON.parse(JSON.stringify(this.defaultState));\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.cols; j++)if (this.board[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    restart() {\n        return this.start();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            return 0;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const rows = document.querySelectorAll(\".field-row\");\n    rows.forEach((rowElement, rowIndex)=>{\n        const cells = rowElement.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, cellIndex)=>{\n            const value = board[rowIndex][cellIndex];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(`field-cell--${value}`);\n        });\n    });\n    const scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$updateStatus();\n}\nfunction $09e991522ca7e64e$var$updateStatus() {\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    const messageStart = document.querySelector(\".message-start\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageLose = document.querySelector(\".message-lose\");\n    messageStart.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    if (statusGame === \"idle\") messageStart.classList.remove(\"hidden\");\n    else if (statusGame === \"win\") messageWin.classList.remove(\"hidden\");\n    else if (statusGame === \"lose\") messageLose.classList.remove(\"hidden\");\n}\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$startButton.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    }\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.22c05c7e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      return 0;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const board = game.getState();\n\n  const rows = document.querySelectorAll('.field-row');\n\n  rows.forEach((rowElement, rowIndex) => {\n    const cells = rowElement.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = board[rowIndex][cellIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.getScore();\n\n  updateStatus();\n}\n\nfunction updateStatus() {\n  const statusGame = game.getStatus();\n\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  if (statusGame === 'idle') {\n    messageStart.classList.remove('hidden');\n  } else if (statusGame === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.replace('start', 'restart');\n    startButton.textContent = 'Restart';\n  }\n  game.start();\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.defaultState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.board = initialState || JSON.parse(JSON.stringify(this.defaultState));\n    this.score = 0;\n    this.status = 'idle';\n    this.rows = 4;\n    this.cols = 4;\n  }\n\n  arraysEqual(arr1, arr2) {\n    return JSON.stringify(arr1) === JSON.stringify(arr2);\n  }\n\n  move(direction) {\n    const directions = {\n      left: (row) => row,\n      right: (row) => row.slice().reverse(),\n      up: (col) => col,\n      down: (col) => col.slice().reverse(),\n    };\n\n    const reverseDirections = {\n      left: (row) => row,\n      right: (row) => row.slice().reverse(),\n      up: (col) => col,\n      down: (col) => col.slice().reverse(),\n    };\n\n    let changeBoard = false;\n\n    if (direction === 'left' || direction === 'right') {\n      for (let i = 0; i < this.rows; i++) {\n        let newRow = directions[direction](this.board[i]).filter(\n          (value) => value !== 0,\n        );\n\n        for (let j = 0; j < newRow.length - 1; j++) {\n          if (newRow[j] === newRow[j + 1]) {\n            newRow[j] *= 2;\n            this.score += newRow[j];\n            newRow[j + 1] = 0;\n            changeBoard = true;\n          }\n        }\n\n        newRow = newRow.filter((value) => value !== 0);\n\n        while (newRow.length < this.rows) {\n          newRow.push(0);\n        }\n\n        newRow = reverseDirections[direction](newRow);\n\n        if (!this.arraysEqual(this.board[i], newRow)) {\n          changeBoard = true;\n        }\n\n        this.board[i] = newRow;\n      }\n    } else {\n      for (let col = 0; col < this.cols; col++) {\n        let colData = this.board.map((row) => row[col]);\n\n        colData = directions[direction](colData);\n\n        let newCol = colData.filter((value) => value !== 0);\n\n        for (let i = 0; i < newCol.length - 1; i++) {\n          if (newCol[i] === newCol[i + 1]) {\n            newCol[i] *= 2;\n            this.score += newCol[i];\n            newCol[i + 1] = 0;\n            changeBoard = true;\n          }\n        }\n\n        newCol = newCol.filter((value) => value !== 0);\n\n        while (newCol.length < this.rows) {\n          newCol.push(0);\n        }\n\n        newCol = reverseDirections[direction](newCol);\n\n        if (\n          !this.arraysEqual(\n            this.board.map((row) => row[col]),\n            newCol,\n          )\n        ) {\n          changeBoard = true;\n        }\n\n        for (let row = 0; row < this.rows; row++) {\n          this.board[row][col] = newCol[row];\n        }\n      }\n    }\n\n    if (this.status === 'playing' && changeBoard) {\n      this.addRandomTile();\n    }\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n  moveUp() {\n    this.move('up');\n  }\n  moveDown() {\n    this.move('down');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    if (this.status === 'idle') {\n      return 'idle';\n    }\n\n    if (this.checkWin()) {\n      return 'win';\n    }\n\n    if (this.checkLose()) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  checkWin() {\n    return this.board.some((row) => row.includes(2048));\n  }\n\n  checkLose() {\n    if (this.board.some((row) => row.includes(0))) {\n      return false;\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        if (\n          (j < 3 && this.board[i][j] === this.board[i][j + 1]) ||\n          (i < 3 && this.board[i][j] === this.board[i + 1][j])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  start() {\n    this.board = JSON.parse(JSON.stringify(this.defaultState));\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  restart() {\n    return this.start();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","defaultState","board","JSON","parse","stringify","score","status","rows","cols","arraysEqual","arr1","arr2","move","direction","directions","left","row","right","slice","reverse","up","col","down","reverseDirections","changeBoard","i","newRow","filter","value","j","length","push","colData","map","newCol","addRandomTile","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","checkWin","checkLose","some","includes","start","emptyCells","Math","floor","random","restart","$09e991522ca7e64e$var$updateUI","document","querySelectorAll","forEach","rowElement","rowIndex","cells","cell","cellIndex","textContent","className","classList","add","scoreElement","querySelector","$09e991522ca7e64e$var$updateStatus","statusGame","messageStart","messageWin","messageLose","remove","addEventListener","e","key","$09e991522ca7e64e$var$startButton","contains","replace"],"version":3,"file":"index.22c05c7e.js.map"}